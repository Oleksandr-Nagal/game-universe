// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  sessions Session[]
  accounts Account[]
  games    Game[]
  wishlist Wishlist[]
  comments Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Game {
  id          String    @id @default(cuid())
  title       String    @unique
  description String
  releaseDate DateTime
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  developerId String?
  publisherId String?
  userId      String?

  developer Developer? @relation(fields: [developerId], references: [id])
  publisher Publisher? @relation(fields: [publisherId], references: [id])
  user      User?      @relation(fields: [userId], references: [id])

  genres    GameGenre[]
  platforms GamePlatform[]
  wishlists Wishlist[]
  comments  Comment[]
}

model Developer {
  id    String @id @default(cuid())
  name  String @unique
  games Game[]
}

model Publisher {
  id    String @id @default(cuid())
  name  String @unique
  games Game[]
}

model Genre {
  id    String      @id @default(cuid())
  name  String      @unique
  games GameGenre[]
}

model Platform {
  id    String         @id @default(cuid())
  name  String         @unique
  games GamePlatform[]
}

model GameGenre {
  game    Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId  String
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId String

  @@id([gameId, genreId])
}

model GamePlatform {
  game       Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId     String
  platform   Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)
  platformId String

  @@id([gameId, platformId])
}

model Wishlist {
  id      String   @id @default(cuid())
  userId  String
  gameId  String
  addedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  gameId String
  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
}
